
#pragma kernel Transfer

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _DandelionBuffer;
RWStructuredBuffer<Vert> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _DandelionBuffer_COUNT;
int _SkeletonBuffer_COUNT;
#include "../Chunks/safeID.cginc"

int _VertsPerVert;
int _NumVertsPerHair;
float3 _CameraUp;
float3 _CameraRight;
float _Radius;


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int transferID = pID / 7;
    int which = pID % 7;


    int sID = ((transferID / _VertsPerVert) + 1) * _NumVertsPerHair -1;
    
    Vert p1 = _DandelionBuffer[safeID( transferID , _DandelionBuffer_COUNT )];
    Vert s1 = _SkeletonBuffer[safeID(sID,_SkeletonBuffer_COUNT)];


    float3 fPos; float2 fUV; float3 fNor; float2 fDebug;

    fNor = normalize(p1.pos - s1.pos);///cross( _CameraRight, _CameraUp );//normalize( cross( 100*(p1.pos - s1.pos), 100*(p1.pos - s2.pos)));


    float3 x = normalize(cross(fNor, float3(0,1,0)));//_CameraRight;
    float3 y = normalize(cross(x,fNor));//_CameraUp;
    float r = _Radius;


    fPos = p1.pos + .001*(float(which) * float3(1,0,0) + float(which%2) * float3(0,1,0)); 
   
    fDebug = float2(1,1);
    fUV = float2(0,0);

    fPos = p1.pos - x * r - y * r;

    if( which == 0 ){
      fPos = p1.pos - x * r - y * r;
      fUV = float2( 0, 0); 
      fDebug = float2( s1.uv.x , 0 );
    }else if( which  == 1 ){
      fPos = p1.pos + x * r - y * r;
      fDebug = float2( s1.uv.x , 0 );
      fUV = float2( 1 , 0 );
    }else if( which == 2 ){
      fPos = p1.pos - x * r + y * r;
      fDebug = float2( s1.uv.x , 0 );
      fUV = float2( 0 , 1 );
    }else if( which == 3 ){
      fPos = p1.pos + x * r + y * r;
      fDebug = float2( s1.uv.x , 0 );
      fUV = float2( 1 , 1 );
    }else if( which == 4 ){
      fPos = p1.pos - x * r * .8 - y * r * .5;
      fDebug = float2( s1.uv.x , 1 );
      fUV = float2( 0 , 1 );
    }else if( which == 5 ){
      fPos = p1.pos + x * r * .8 - y * r * .5;
      fDebug = float2( s1.uv.x , 1 );
      fUV = float2( 1 , 1 );
    }else{
      fPos = s1.pos;
      fDebug = float2( s1.uv.x , 1 );
      fUV = float2( .5, 0 );
    }

    pID = safeID(pID,_VertBuffer_COUNT);

    _VertBuffer[pID].pos = fPos;
    _VertBuffer[pID].uv = fUV;
    _VertBuffer[pID].nor = fNor;
    _VertBuffer[pID].debug = fDebug;

}
