#pragma kernel Paint

#include "../Chunks/safeID.cginc"


struct Vert{
    float3 pos;
    float3 nor;
    float3 tangent;
    float2 uv;
    float debug;
};


RWStructuredBuffer<Vert> _VectorBuffer;

int _VectorBuffer_COUNT;
float _Delta;

float4x4 _Transform;
float4x4 _oTransform;
float3 _DeltaPos;

float _MapSize;
float _MapHeight;

float3 _PaintPosition;
float3 _PaintDirection;
float _PaintSize;
float _PaintOpacity;
float _NormalOrHeight;



Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;


    float3 worldPos( float3 pos ){
        float4 c = _HeightMap.SampleLevel(sampler_HeightMap, (pos.xz) * _MapSize , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
        pos.y = _MapHeight * c.x;//* sin(.1 *length(pos.xz)) ;//c.x * 1000;//_MapHeight;
        return pos;
    }


#include "../Chunks/noise.cginc"

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Paint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int sID = safeID( pID , _VectorBuffer_COUNT );
    Vert v = _VectorBuffer[sID];


    if(_NormalOrHeight == 0){

      float3 newVal = float3(_PaintDirection.x , 0 , _PaintDirection.z) * _PaintOpacity;

      float l = saturate( length(v.pos - _PaintPosition ) / _PaintSize );
      newVal = lerp( newVal , float3(0,0,0) , l );


      v.nor +=  newVal;//float3( noise( v.pos ) , 0 , noise( v.pos * 10 ) );
      v.nor = normalize( v.nor );

    //  v.pos = worldPos( v.pos );
    }else if( _NormalOrHeight == 1 ){
  
      float l = saturate( length(v.pos - _PaintPosition ) / _PaintSize );
      v.pos.y += lerp( _PaintOpacity , 0 , l );

      if( v.pos.y > _MapHeight ){ v.pos.y = _MapHeight; }
    }else{
      
      float l = saturate( length(v.pos - _PaintPosition ) / _PaintSize );
      v.pos.y -= lerp( _PaintOpacity , 0 , l );
      if( v.pos.y < 0 ){ v.pos.y = 0; }

    }
    _VectorBuffer[sID] = v;

}