#pragma kernel PlacePoint


  struct Vert{

  
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tang;
    float2 uv;
    float used;
    float3 triIDs;
    float3 triWeights;
    float3 debug;

  };

struct SkinnedVert{

    float3 pos;
    float3 vel;
    float3 nor;
    float3 tang;
    float2 uv;
  
    float used;
  
   
    float3 targetPos;
    float3 bindPos;
    float3 bindNor;
    float3 bindTan;

    float4 boneWeights;
    float4 boneIDs;

    float debug;

  };


float _Emit;
float _EmissionRate;

#include "../Chunks/snoise.cginc"
#include "../Chunks/hash.cginc"
#include "../Chunks/curlNoise.cginc"

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<SkinnedVert> _SkinnedBuffer;


Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;
float _MapSize;
float _MapHeight;
float4 sample( float3 pos ){
    float4 c = _HeightMap.SampleLevel(sampler_HeightMap, pos.xz * _MapSize , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
    c.x = c.x * _MapHeight;// + 1 + c.a*2);
    return c;
}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void PlacePoint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  Vert vert = _VertBuffer[pID];
  SkinnedVert v0 = _SkinnedBuffer[int(vert.triIDs.x)];
  SkinnedVert v1 = _SkinnedBuffer[int(vert.triIDs.y)];
  SkinnedVert v2 = _SkinnedBuffer[int(vert.triIDs.z)];



  float3 fPos  = v0.pos * vert.triWeights.x;
         fPos += v1.pos * vert.triWeights.y;
         fPos += v2.pos * vert.triWeights.z;

  float3 fNor  = v0.nor * vert.triWeights.x;
         fNor += v1.nor * vert.triWeights.y;
         fNor += v2.nor * vert.triWeights.z;

  float3 fTan  = v0.tang * vert.triWeights.x;
         fTan += v1.tang * vert.triWeights.y;
         fTan += v2.tang * vert.triWeights.z;

           float3 fVel  = v0.vel * vert.triWeights.x;
         fVel += v1.vel * vert.triWeights.y;
         fVel += v2.vel * vert.triWeights.z;

  float2 fUV  = v0.uv * vert.triWeights.x;
         fUV += v1.uv * vert.triWeights.y;
         fUV += v2.uv * vert.triWeights.z;


/*
  vert.nor = normalize(fNor);
  vert.tang = fTan;
  vert.uv = fUV;

  vert.debug = 1;
  vert.pos = fPos;
  */

vert.used -= _EmissionRate;//.001;

float3 force = 0;

if( _Emit > .5 ){

  vert.used -= .2;
}


if( vert.used < 0 ){
  vert.pos = fPos;
  vert.vel = -.2 * fVel;//float3(0,0,0);
  vert.used += 1;
}else{
   float4 data = sample(vert.pos);

    float height = data.x;
    float2 direction = (data.yz *2- 1);
    float grass = data.w;


//force += normalize( fNor ) * .01;
force += curlNoise( vert.pos ) ;
force += float3(direction.x,0,direction.y);


float h = 3 + 2 * hash(pID*1000);
    if( vert.pos.y < height + h* .2+ grass * 2){
      float delta =  vert.pos.y - (height + h + grass * 2);
      force -= .3 * delta * float3(0,1,0);
    }else{
      force -= .1 * float3(0,1,0);
    }


vert.vel += force * .01;

vert.vel *= .9;

vert.pos += vert.vel;

}



  _VertBuffer[pID] = vert;

}