#pragma kernel PlacePoint


  struct Vert{

    float3 pos;
    float3 vel;
    float3 nor;
    float3 tang;
    float2 uv;
    float used;
    float3 triIDs;
    float3 triWeights;
    float3 debug;

  };

struct SkinnedVert{

    float3 pos;
    float3 nor;
    float3 tang;
    float2 uv;
  
    float debug;


  };


float4x4 _Transform;

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<SkinnedVert> _SkinnedBuffer;

int _VertBuffer_COUNT;
int _SkinnedBuffer_COUNT;

#include "../Chunks/safeID.cginc"

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void PlacePoint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];

  if( vert.used == 1){
  SkinnedVert v0 = _SkinnedBuffer[safeID(int(vert.triIDs.x),_SkinnedBuffer_COUNT)];
  SkinnedVert v1 = _SkinnedBuffer[safeID(int(vert.triIDs.y),_SkinnedBuffer_COUNT)];
  SkinnedVert v2 = _SkinnedBuffer[safeID(int(vert.triIDs.z),_SkinnedBuffer_COUNT)];


  float3 fPos  = v0.pos * vert.triWeights.x;
         fPos += v1.pos * vert.triWeights.y;
         fPos += v2.pos * vert.triWeights.z;

  float3 fTang  = v0.tang * vert.triWeights.x;
         fTang += v1.tang * vert.triWeights.y;
         fTang += v2.tang * vert.triWeights.z;


  float3 fNor  = v0.nor * vert.triWeights.x;
         fNor += v1.nor * vert.triWeights.y;
         fNor += v2.nor * vert.triWeights.z;


  float2 fUV  = v0.uv * vert.triWeights.x;
         fUV += v1.uv * vert.triWeights.y;
         fUV += v2.uv * vert.triWeights.z;


  vert.nor = normalize(mul( _Transform , float4( normalize(fNor) , 0 )).xyz);
  vert.tang = normalize(mul( _Transform , float4( normalize(fTang) , 0 )).xyz);
  vert.uv = fUV;

  vert.debug = fPos;
  vert.pos = mul( _Transform , float4( fPos + normalize(fNor) * .001 , 1 )).xyz;
  
  _VertBuffer[pID] = vert;
}
}