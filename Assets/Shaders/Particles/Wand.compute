#pragma kernel Flow


struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 ogPos;
  float2 uv;
  float2 debug;
};



RWStructuredBuffer<Vert> _VertBuffer;
Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;
float _MapSize;
float _MapHeight;
float _Down;
float3 _WandPos;

float3 worldPos( float3 pos ){
    float4 c = _HeightMap.SampleLevel(sampler_HeightMap, pos.xz * _MapSize , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
    pos.y = max(pos.y, c.x * _MapHeight + 1 + c.a*2);
    return pos;
}


float3 directionVector( float3 pos ){
    float4 c = _HeightMap.SampleLevel(sampler_HeightMap, pos.xz * _MapSize , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
    return 2*float3(c.g,.5,c.b)-1;
}

float3 _Frame1;
float3 _Frame2;
float3 _Frame3;
float3 _Frame4;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;

#include "../Chunks/safeID.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"



float3 getProj( float3 pos , float3 sp , float3 ep ){
  float3 dif = sp-ep;
  float dot1 = dot( pos-sp , normalize(dif));

  float3 proj = normalize(dif) * dot1;
  float dotProj = dot( proj, ep-sp);
  
  float3 lineToPoint = pos-sp-proj;

  return lineToPoint;
}


float3 rodForce(float r , float3 pos ){


  float3 p1 = getProj( pos , _Frame1 , _Frame2 );
  float3 p2 = getProj( pos , _Frame2 , _Frame4 );
  float3 p3 = getProj( pos , _Frame4 , _Frame3 );
  float3 p4 = getProj( pos , _Frame3 , _Frame1 );


  p1 = normalize(p1)/length(p1);
  p2 = normalize(p2)/length(p2);
  p3 = normalize(p3)/length(p3);
  p4 = normalize(p4)/length(p4);

  if( length(p1) > 2){ p1 = normalize(p1) * 2;}
  if( length(p2) > 2){ p2 = normalize(p2) * 2;}
  if( length(p3) > 2){ p3 = normalize(p3) * 2;}
  if( length(p4) > 2){ p4 = normalize(p4) * 2;}
  
  float3 minDist = p1+p2+p3+p4;//min(p1,min(p2,min(p3,p4)));


  float3 towards = minDist;

 // float3 crossVal = 
  //minDist = clamp( minDist, float3(-5,-5,-5) , float3(5,5,5));
  return minDist;




}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];

  

  if( vert.debug.x < 0 && _Down > .5 ){
    float3 pos = float3(vert.uv.x/_MapSize,0, vert.uv.y/_MapSize );
    float p = float(pID);
    float3 r = float3(sin(p*113.1),sin(p*3512.34),sin(p*4123.42));
    vert.pos = _WandPos + r + float3(0,1,0); //worldPos(pos);
    vert.debug.x = abs(vert.debug.x)+1;
    vert.debug.x %= 1;
    vert.debug.x += 1;
    vert.vel =.4 * (r* .4+float3(0,.4,0));
  }else{

    float3 force = directionVector( vert.pos );

    force += float3(0,-.5,0);
    force += curlNoise(vert.pos * .1);

    force += 1.1*-rodForce(1,vert.pos);
   vert.vel += force * .01;

   vert.debug.x -= .01 * (1+sin(float(pID)));

   vert.pos += vert.vel;

   vert.vel *= .8;

  vert.pos = worldPos(vert.pos);

  }





  
  _VertBuffer[pID] = vert;
//}
}